stages:   # List of stages for jobs and their order of execution
  - lint
  - build
  - dockerize
  - test
  - deploy

variables:
  IMAGE_VERSION: '1.0'

lint-job:
  stage: lint
  variables:
    CHECKSTYLE_VERSION: "3.3.0"
  image: maven:3.8.4-openjdk-17
  script:
    # Install Checkstyle plugins
    - mvn org.apache.maven.plugins:maven-checkstyle-plugin:$CHECKSTYLE_VERSION:checkstyle
  artifacts:
    paths:
      - target/checkstyle-result.xml

build-job:
  stage: build
  image: maven:3.8.4-openjdk-17
  script:
    - date
    - echo "Project '$CI_PROJECT_PATH'"
    - echo "Brach '$CI_COMMIT_BRANCH'"
    - echo "Running '$CI_JOB_NAME' job under '$CI_JOB_STAGE' stage."
    - echo "The job is responsible for building the artifact."
    - mvn package
  artifacts:
    paths:
      - target/config-server*.jar
    expire_in: 1 day  

dockeriz-job:
  stage: dockerize
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build . -t config-server-$IMAGE_VERSION
    - mkdir image
    - docker save config-server-$IMAGE_VERSION > image/config-server-$IMAGE_VERSION.tar
  artifacts:
    paths:
      - image
    expire_in: 1 hour 
  rules:
    - if: $CHECK_CODE_QUALITY == 'Y'
      when: never # Do not run if pipeline is running for just checking the code quality
    - when: on_success  

test1-job:
  stage: test
  variables:
    HEALTH_RESPONSE: '' 
    STATUS: ''
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "Running '$CI_JOB_NAME' job under '$CI_JOB_STAGE' stage."
    - echo "The job is responsible for testing the artifact."
    - docker load -i image/config-server-$IMAGE_VERSION.tar
    - docker run -d --network=host -e MIN_HEAP_SIZE=256m -e MAX_HEAP_SIZE=512m -e PROFILE=git -e CONFIG_SERVER_USERNAME=fsmConfigAdmin -e CONFIG_SERVER_PASSWORD=password -e GIT_PASSWORD=Brilliant2@ config-server-$IMAGE_VERSION:latest
    - sleep 15
    - HEALTH_RESPONSE=$(curl -s -X GET http://docker:8888/actuator/health/)
    - echo "Health response is $HEALTH_RESPONSE"
    - STATUS=$(echo "$HEALTH_RESPONSE" | jq -r '.status')
    - echo "Health status is $STATUS"
    - |
      if [ "$STATUS" != "UP" ]; then
        echo "Status is not UP. Failing the pipeline."
        exit 1
      fi
  rules:
    - if: $CHECK_CODE_QUALITY == 'Y'
      when: never # Do not run if pipeline is running for just checking the code quality    
    - when: on_success
    
test2-job:
  stage: test
  script:
    - echo "Running '$CI_JOB_NAME' job under '$CI_JOB_STAGE' stage."
    - echo "The job is responsible for testing and allows failures" 
  allow_failure: true
  rules:
    - if: $CHECK_CODE_QUALITY == 'Y'
      when: never # Do not run if pipeline is running for just checking the code quality 
    - when: on_success  

deploy-prod:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  variables:
    AWS_ECR_REGISTRY: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
    AWS_ECR_FSM_REPO: $AWS_ECR_REGISTRY/fsm-repository
  before_script:
    - apk add --no-cache py3-pip
    - pip install awscli  
  script:
    - echo "Running '$CI_JOB_NAME' job under '$CI_JOB_STAGE' stage."
    - echo "The job will be responsible for deploying artifact"
    - docker load -i image/config-server-$IMAGE_VERSION.tar
    - aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY
    - docker tag config-server-$IMAGE_VERSION:latest $AWS_ECR_FSM_REPO:config-server-$IMAGE_VERSION
    - docker push $AWS_ECR_FSM_REPO:config-server-$IMAGE_VERSION
    - echo $CI_PIPELINE_SOURCE
  environment: production
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never # Do not run if the pipeline source is a merge request
    - if: $CI_PIPELINE_SOURCE == 'push'
      when: never # Do not run if the pipeline source is push command  
    - if: $CHECK_CODE_QUALITY == 'Y'
      when: never # Do not run if pipeline is running for just checking the code quality 
    - when: on_success 